{
  "providers": {
    "openai_gpt35_turbo": {
      "name": "openai_gpt35_turbo",
      "api_key": "YOUR_OPENAI_API_KEY_HERE",
      "endpoint": "https://api.openai.com/v1",
      "model": "gpt-3.5-turbo",
      "options": {}
    },
    "openai_gpt4o_vision": {
      "name": "openai_gpt4o_vision",
      "api_key": "YOUR_OPENAI_API_KEY_HERE",
      "endpoint": "https://api.openai.com/v1",
      "model": "gpt-4o",
      "options": {}
    },
    "openai_whisper_1": {
      "name": "openai_whisper_1",
      "api_key": "YOUR_OPENAI_API_KEY_HERE",
      "endpoint": "https://api.openai.com/v1",
      "model": "whisper-1",
      "options": {}
    },
    "google_gemini_15_flash": {
      "name": "google_gemini_15_flash",
      "api_key": "YOUR_GOOGLE_API_KEY_HERE",
      "endpoint": null,
      "model": "gemini-1.5-flash-latest",
      "options": {
        "max_retries": 3,
        "retry_multiplier": 1,
        "retry_min_wait": 2,
        "retry_max_wait": 10,
        "generation_config": {
          "temperature": 0.7,
          "top_p": 1.0,
          "top_k": 32,
          "max_output_tokens": 8192
        },
        "safety_settings": [
          { "category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
          { "category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
          { "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
          { "category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" }
        ]
      }
    },
    "huggingface_placeholder": {
      "name": "huggingface_placeholder",
      "api_key": "YOUR_HUGGINGFACE_TOKEN_HERE",
      "endpoint": "text-generation.example.com",
      "model": "mistralai/Mistral-7B-Instruct-v0.1",
      "options": {}
    }
  },
  "services": {
    "direct_call": {
      "provider": "openai_gpt35_turbo",
      "prompt_template_version": "v1",
      "cache_enabled": false,
      "options": {
        "prompt_template": "{text}",
        "llm_params": {
          "temperature": 0.7,
          "max_tokens": 1024
        }
      }
    },
    "translate": {
      "provider": "openai_gpt35_turbo",
      "prompt_template_version": "v1",
      "cache_enabled": false,
      "options": {
        "prompt_templates": {
          "default": "Translate the following text from {source_language} to {target_language}. Provide only the translated text, without any additional explanations or conversational phrases.\n\nOriginal text: \n\"\"\"{text}\"\"\"",
          "formal": "Please provide a formal translation of the following text from {source_language} into {target_language}.\n\nText to translate: \n\"\"\"{text}\"\"\"",
          "summarize_and_translate": "Summarize the following text in {source_language} and then translate the summary into {target_language}.\n\nOriginal text: \n\"\"\"{text}\"\"\""
        },
        "default_prompt_key": "default",
        "llm_params": {
          "temperature": 0.3,
          "max_tokens": 1500
        }
      }
    },
    "metadata_extraction": {
      "provider": "openai_gpt35_turbo", 
      "prompt_template_version": "v1",
      "cache_enabled": false,
      "options": {
        "image_processing": {
          "vlm_provider": "openai_gpt4o_vision",
          "vlm_prompt_template": "Describe this image in detail, focusing on objects, people, setting, and any discernible activities or text.",
          "metadata_llm_provider": "openai_gpt35_turbo",
          "metadata_llm_prompt_template": "From the following image description, extract structured metadata. The metadata should include a concise title, a short descriptive summary (2-3 sentences), a list of relevant keywords (5-10), main objects identified, and any dominant colors.\n\nImage Description:\n\"\"\"{vlm_output}\"\"\"\n\nReturn the metadata as a JSON object.",
          "llm_params": {
            "temperature": 0.5,
            "max_tokens": 500,
            "response_format": { "type": "json_object" }
          }
        },
        "audio_processing": {
          "stt_provider": "openai_whisper_1",
          "stt_options": {
            "response_format": "text"
          },
          "metadata_llm_provider": "openai_gpt35_turbo",
          "metadata_llm_prompt_template": "Based on the following audio transcript, extract structured metadata. The metadata should include a concise title for the audio content, a brief summary (2-3 sentences), a list of main topics discussed (3-5), and any identifiable speakers if discernible from the context.\n\nAudio Transcript:\n\"\"\"{stt_output}\"\"\"\n\nReturn the metadata as a JSON object.",
          "llm_params": {
            "temperature": 0.5,
            "max_tokens": 500,
            "response_format": { "type": "json_object" }
          }
        },
        "video_processing": {
          "stt_provider": "openai_whisper_1",
          "stt_options": {
            "response_format": "text" 
          },
          "metadata_llm_provider": "openai_gpt35_turbo",
          "metadata_llm_prompt_template": "From the transcript of this video, extract structured metadata. Include a title, a short summary (2-3 sentences), key topics or themes, and any mentioned entities (people, places, organizations). If the video seems to be a tutorial or instructional, note that.\n\nVideo Transcript:\n\"\"\"{stt_output}\"\"\"\n\nReturn the metadata as a JSON object.",
          "llm_params": {
            "temperature": 0.5,
            "max_tokens": 600,
            "response_format": { "type": "json_object" }
          }
        },
        "document_processing": {
          "llm_provider": "openai_gpt35_turbo",
          "metadata_llm_prompt_template": "Analyze the following document text and extract structured metadata. This should include a suitable title, a concise summary (3-4 sentences), a list of 5-10 relevant keywords, and any key entities (like names, organizations, locations, dates) mentioned.\n\nDocument Text:\n\"\"\"{document_text}\"\"\"\n\nReturn the metadata as a JSON object.",
          "llm_params": {
            "temperature": 0.4,
            "max_tokens": 700,
            "response_format": { "type": "json_object" }
          }
        }
      }
    },
    "profile_generation": {
      "provider": "openai_gpt35_turbo",
      "prompt_template_version": "v1",
      "cache_enabled": false,
      "profile_schema": {
        "type": "object",
        "properties": {
          "full_name": { "type": "string", "description": "Full name of the person." },
          "summary": { "type": "string", "description": "A brief 2-3 sentence summary of the person based on the provided texts." },
          "skills": { "type": "array", "items": { "type": "string" }, "description": "List of key skills mentioned." },
          "experience_years": { "type": "integer", "description": "Estimated total years of professional experience, if discernible." },
          "key_achievements": { "type": "array", "items": { "type": "string" }, "description": "Notable achievements or projects." },
          "current_role": { "type": "string", "description": "Current job title or role, if available." },
          "education": { "type": "array", "items": { "type": "string" }, "description": "Educational background."}
        },
        "required": ["full_name", "summary"]
      },
      "options": {
        "prompt_template": "You are an expert profile generator. Based on the following texts, create a structured JSON profile of the individual. The profile must strictly adhere to the provided JSON schema. Ensure all text fields are populated based *only* on the information present in the texts. If information for a non-required field is not available, omit the field or use a null value if appropriate for the schema type (but prefer omission for strings/arrays if empty).\n\nJSON Schema:\n```json\n{profile_schema}\n```\n\nInput Texts (concatenated):\n\"\"\"{texts_concatenated}\"\"\"\n\nGenerate the JSON profile:",
        "llm_params": {
          "temperature": 0.2,
          "max_tokens": 2000,
          "response_format": { "type": "json_object" }
        },
        "max_input_text_length": 15000,
        "validate_schema_output": true 
      }
    }
  }
}
